- name: Create gitlab directories
  file: path={{ item }} recurse=yes state=directory
  with_items:
    - "{{ gitlab_config_dir }}"
    - "{{ gitlab_logs_dir }}"
    - "{{ gitlab_data_dir }}"
    - "{{ gitlab_data_backup_dir }}"

- name: Install Gitlab container
  community.docker.docker_container:
    name: "{{ gitlab_container_name }}"
    hostname: "{{ gitlab_site }}"
    image: "{{ gitlab_image }}"
    state: started
    ports:
      - "{{ gitlab_ssh_port }}:22"
      - "{{ gitlab_http_port }}:80"
      - "{{ gitlab_https_port }}:443"
    volumes:
      - "{{ gitlab_config_dir }}:/etc/gitlab"
      - "{{ gitlab_logs_dir }}:/var/log/gitlab"
      - "{{ gitlab_data_dir }}:/var/opt/gitlab"
    restart_policy: always

- name: Deploy gitlab configuration
  template: src=gitlab.rb.j2 dest="{{ gitlab_config_dir }}/gitlab.rb" owner=root group=root mode=0644

- name: Copy gitlab-secrets.json to remote machine
  shell: cp "{{ gitlab_restore_secrets_file }}" "{{ gitlab_config_dir }}/gitlab-secrets.json"

- name: Copy backup file to remote machine
  shell: cp "{{ gitlab_restore_backup_file }}" ""{{ gitlab_data_dir }}"/backups/"

- name: Restart Gitlab container
  shell: docker restart {{ gitlab_container_name }}

- name: New chown in container gitlab
  shell: docker exec -i {{ gitlab_container_name | quote }} chown git:git "/var/opt/gitlab/backups/"{{ gitlab_filename_new }}""

- name: New chown in container gitlab backup dir
  shell: docker exec -i {{ gitlab_container_name | quote }} chown git:git "/mnt/backup/"

- name: Stop gitlab services
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-ctl stop {{ item }}
  ignore_errors: True
  with_items:
    - unicorn
    - sidekiq

- name: Backup restore
  shell: docker exec -i {{ gitlab_container_name | quote }} bash -c " yes yes | gitlab-rake gitlab:backup:restore BACKUP={{ gitlab_restore_backup_id | quote }}"

- name: Gitlab reconfigure
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-ctl reconfigure

- name: Start gitlab services
  shell: docker exec -i {{ gitlab_container_name | quote }} bash -c "gitlab-ctl start"

- name: Health check Gitlab
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-rake gitlab:check SANITIZE=true
  register: out_gitlab
- debug: msg="{{ out_gitlab.stdout }}
- debug: msg="{{ out_gitlab.stderr }}"

- name: Health check Gitlab 
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-rake gitlab:doctor:secrets
  register: out_secret
- debug: msg="{{ out_secret.stdout }}"
- debug: msg="{{ out_secret.stderr }}"

- name: Health check Gitlab 
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-rake gitlab:artifacts:check
  register: out_artifacts
- debug: msg="{{ out_artifacts.stdout }}"
- debug: msg="{{ out_artifacts.stderr }}"

- name: Health check Gitlab 
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-rake gitlab:lfs:check
  register: out_lfs
- debug: msg="{{ out_lfs.stdout }}"
- debug: msg="{{ out_lfs.stderr }}"

- name: Health check Gitlab 
  shell: docker exec -i {{ gitlab_container_name | quote }} gitlab-rake gitlab:uploads:check
  register: out_uploads
- debug: msg="{{ out_uploads.stdout }}"
- debug: msg="{{ out_uploads.stderr }}"

- name: Delete backup file from local storage
  shell: rm ""{{ gitlab_data_dir }}"/backups/"{{ gitlab_filename_new }}""

- name: copy script auto-backup 
  template: src=backup-gitlab-sh.j2 dest="{{ gitlab_script_backup_dir }}/backup-gitlab.sh" owner=root group=root mode=0644